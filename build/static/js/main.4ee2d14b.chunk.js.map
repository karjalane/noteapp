{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseURL","axios","get","then","response","data","newObject","post","id","put","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","toggleImportanceOf","find","n","changedNote","returnedNote","map","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","noteObject","Math","random","concat","placeholder","value","onChange","console","log","target","type","style","color","fontStyle","fontSize","ReactDOM","render","document","getElementById"],"mappings":"yNAiBeA,EAfF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EACFF,EAAKG,UACH,mBACA,iBAEN,OACI,wBAAIC,UAAU,QACRJ,EAAKK,QACL,KACF,4BAAQC,QAASL,GAAmBC,K,gBCX1CK,EAAU,0CAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCF9BK,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAGP,yBAAKd,UAAU,SACTc,I,8NCHd,IA2GeC,EA3GH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACNC,IAEKpB,MAAK,SAAAqB,GACFT,EAASS,QAElB,IAEH,IAAMC,EAAqB,SAACjB,GACxB,IAAMf,EAAOqB,EAAMY,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,KAAOA,KAChCoB,E,yVAAW,IAAQnC,EAAR,CAAcG,WAAYH,EAAKG,YAEhD2B,EACYf,EAAIoB,GACXzB,MAAK,SAAA0B,GACFd,EAASD,EAAMgB,KAAI,SAAArC,GAAI,OACnBA,EAAKe,KAAOA,EACVf,EACAoC,SAETE,OAAM,SAAAC,GACHX,EAAgB,SAAD,OACF5B,EAAKK,QADH,2CAGfmC,YAAW,WACPZ,EAAgB,QACjB,KACHN,EAASD,EAAMoB,QAAO,SAAAP,GAAC,OAAIA,EAAEnB,KAAOA,UAI1C2B,EAAcjB,EACdJ,EACAA,EAAMoB,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aA2ChC,OACI,6BACI,qCAEA,kBAAC,EAAD,CAAce,QAAUS,IAExB,6BACI,4BAAQrB,QAAS,kBAAMoB,GAAYD,KAAnC,QACWA,EAAU,YAAc,QAGvC,4BApDWiB,EAAYL,KAAI,SAAArC,GAAI,OACnC,kBAAC,EAAD,CACI2C,IAAM3C,EAAKe,GACXf,KAAOA,EACPC,iBAAkB,kBAAM+B,EAAmBhC,EAAKe,WAmDhD,0BAAM6B,SA/CE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACf1C,QAASkB,EACTpB,UAAW6C,KAAKC,SAAW,IAE/BnB,EACYiB,GACPrC,MAAK,SAAA0B,GACFd,EAASD,EAAM6B,OAAOd,IACtBZ,EAAW,SAsCX,2BAAO2B,YAAY,WACjBC,MAAQ7B,EACR8B,SApCW,SAACR,GACtBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB5B,EAAWqB,EAAMW,OAAOJ,UAmChB,4BAAQK,KAAK,UAAb,SAEJ,mBAlCO,WAMX,OACI,yBAAKC,MANW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIN,6BACA,8DAyBJ,Q,MC/EZC,IAASC,OACL,kBAAC,EAAD,MACEC,SAASC,eAAe,W","file":"static/js/main.4ee2d14b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => { \n    const label = \n        note.important\n        ? 'Make unimportant'\n        : 'Make important'\n\n    return (\n        <li className='note'>\n            { note.content }\n            { '  ' }\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n        )\n    }\n\nexport default Note","import axios from 'axios'\nconst baseURL = 'https://notanoteapp.herokuapp.com/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseURL)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseURL, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => { \n    const request = axios.put(`${baseURL}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n    return (\n        <div className='error'>\n            { message }\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n    \n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => \n                    note.id !== id \n                    ? note\n                    : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' has already been removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n    \n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    const rows = () => notesToShow.map(note => \n        <Note\n            key={ note.id }\n            note={ note }\n            toggleImportance={() => toggleImportanceOf(note.id)} \n            />\n    )\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            important: Math.random() > 0.5,\n      }\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const Footer = () => {\n        const footerStyle = {\n            color: 'green',\n            fontStyle: 'italic',\n            fontSize: 16\n        }\n        return (\n            <div style={ footerStyle }>\n                <br />\n                <em>Note app, courtesy of !nino</em>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <h1>Notes</h1>\n\n            <Notification message={ errorMessage } />\n\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    Show { showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                { rows() }\n            </ul>\n            <form onSubmit={ addNote }>\n                <input placeholder=\"add note\"\n                  value={ newNote }\n                  onChange={ handleNoteChange } />\n                <button type='submit'>Save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\n/*\nconst notes =[\n    {\n        id: 1,\n        content: 'HTML is easy',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true\n    },\n    {\n        id: 2,\n        content: 'Browser can execute only JavaScript',\n        date: '2019-05-30T18:39:34.091Z',\n        important: false\n    },\n    {\n        id: 3,\n        content: 'GET and POST are the most important methods of HTTP protocol',\n        date: '2019-05-30T19:20:14.298Z',\n        important: true\n    }\n]\n*/\n\nReactDOM.render(\n    <App />\n    , document.getElementById('root'));\n"],"sourceRoot":""}